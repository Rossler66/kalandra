<?php/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of fce * * @author RobertRossler */class fce {    //put your code here    protected static function eleTypInterval($typId) {        if ($typId < 10000000) {            $od = 0;            $do = 99999999;        } elseif ($typId % 100000000 == 0) {            $od = 0;            $do = 99999999;        } elseif ($typId % 1000000 == 0) {            $od = $typId;            $do = $typId + 999999;        } elseif ($typId % 10000 == 0) {            $od = $typId;            $do = $typId + 9999;        } else {            $od = $typId;            $do = $typId + 99;        }        return array($od, $do);    }    protected function ulozFile($tmp_name, $name, $path) {        $Sou = $name;        $ZacCesty = strpos($Sou, ":");        $ZacPrip = strrpos($Sou, ".");        $Disk = substr($Sou, 0, $ZacCesty);        $Cesta = substr($Sou, $ZacCesty, $ZacPrip);        $Pripona = substr($Sou, $ZacPrip + 1, 999);        $soubor = $path . $Cesta . "." . $Pripona;        move_uploaded_file($tmp_name, $soubor);        return $soubor;    }    protected function dateDb2Txt($date) {        $dat = explode("-", $date);        return $dat[2] . "." . $dat[1] . "." . $dat[0];    }    protected function vratObjekt($jamp, $soubor, $trida, $param = null) {        if ($jamp) {            $souborPhp = $jamp . "/" . $soubor . ".php";        } else {            $souborPhp = $soubor . ".php";        }        include_once($souborPhp);        if ($param == null) {            return new $trida();        } else {            return new $trida($param);        }    }    protected function nactiSeznam($jamp, $soubor, $trida, $param = null) {        $zdroj = $this->vratObjekt($jamp, $soubor, $trida);        $zdroj->set($param);        return $zdroj->nacti();    }    protected function nactiSQL($asQ) {        $qQ = db::query($asQ);        $pole = array();        while ($pQ = $qQ->fetch_assoc()) {            array_push($pole, $pQ);        }        return $pole;    }    protected function jePravo($pravo) {        $asQ = "SELECT count(*) as pocet from uzi_prava_vaz WHERE uzivatel_id = " . $_SESSION["uzivId"] . " AND pravo_id = " . $pravo;        $Q = db::query($asQ);        $P = $Q->fetch_assoc();        return $P["pocet"];    }    protected function tiskObsah($html) {            }    public function bezDiakritiky($text) {        $prevodni_tabulka = Array(            'ä' => 'a',            'Ä' => 'A',            'á' => 'a',            'Á' => 'A',            'à' => 'a',            'À' => 'A',            'ã' => 'a',            'Ã' => 'A',            'â' => 'a',            'Â' => 'A',            'č' => 'c',            'Č' => 'C',            'ć' => 'c',            'Ć' => 'C',            'ď' => 'd',            'Ď' => 'D',            'ě' => 'e',            'Ě' => 'E',            'é' => 'e',            'É' => 'E',            'ë' => 'e',            'Ë' => 'E',            'è' => 'e',            'È' => 'E',            'ê' => 'e',            'Ê' => 'E',            'í' => 'i',            'Í' => 'I',            'ï' => 'i',            'Ï' => 'I',            'ì' => 'i',            'Ì' => 'I',            'î' => 'i',            'Î' => 'I',            'ľ' => 'l',            'Ľ' => 'L',            'ĺ' => 'l',            'Ĺ' => 'L',            'ń' => 'n',            'Ń' => 'N',            'ň' => 'n',            'Ň' => 'N',            'ñ' => 'n',            'Ñ' => 'N',            'ó' => 'o',            'Ó' => 'O',            'ö' => 'o',            'Ö' => 'O',            'ô' => 'o',            'Ô' => 'O',            'ò' => 'o',            'Ò' => 'O',            'õ' => 'o',            'Õ' => 'O',            'ő' => 'o',            'Ő' => 'O',            'ř' => 'r',            'Ř' => 'R',            'ŕ' => 'r',            'Ŕ' => 'R',            'š' => 's',            'Š' => 'S',            'ś' => 's',            'Ś' => 'S',            'ť' => 't',            'Ť' => 'T',            'ú' => 'u',            'Ú' => 'U',            'ů' => 'u',            'Ů' => 'U',            'ü' => 'u',            'Ü' => 'U',            'ù' => 'u',            'Ù' => 'U',            'ũ' => 'u',            'Ũ' => 'U',            'û' => 'u',            'Û' => 'U',            'ý' => 'y',            'Ý' => 'Y',            'ž' => 'z',            'Ž' => 'Z',            'ź' => 'z',            'Ź' => 'Z'        );        return strtr($text, $prevodni_tabulka);    }    protected function sek2cas($sek) {        $s = $sek % 60;        $sek = ( $sek - $s ) / 60;        $m = $sek % 60;        $h = ( $sek - $m ) / 60;        return $h . ":" . $m . ":" . $s;    }    protected function dateTime($dt) {        if ($dt) {            return date("d.m.y - H:i", strtotime($dt));        } else {            return "";        }    }    protected function datum($dt) {        if (strtotime($dt) < 0) {            return "---";        }        if ($dt) {            return date("d.m.y", strtotime($dt));        } else {            return "";        }    }    /*      //Formátuje číslo tak, že vypíše 0 desetinných míst      protected function cislo0($ci) {      return number_format($ci, 0, vystup::desOdd, vystup::tisOdd);      }      //Formátuje číslo tak, že vypíše 2 desetinná místa      protected function cislo2($ci) {      return number_format($ci, 2, vystup::desOdd, vystup::tisOdd);      }      protected function cislo3($ci) {      return number_format($ci, 3, vystup::desOdd, vystup::tisOdd);      }     */    protected function cisdok($cislo) {        if (strlen($cislo) == 9) {            return substr($cislo, 0, 2) . " " . substr($cislo, 2, 1) . " " . substr($cislo, 3, 2) . " " . substr($cislo, 5);        } else {            return substr($cislo, 0, 2) . " - " . substr($cislo, 2, 2) . " " . substr($cislo, 4);        }    }    //Formátuje číslo tak, že vypíše 0 desetinných míst    protected function cislo0($ci) {        return number_format($ci, 0, ',', '');    }    //Formátuje číslo tak, že vypíše 2 desetinná místa    protected function cislo2($ci) {        return number_format($ci, 2, ',', '');    }    protected function cislo3($ci) {        return number_format($ci, 3, ',', '');    }    protected function doklad($ci) {        return $ci;    }    public function vypisPole($pole) {        $vystup = "";        foreach ($pole[0] as $klic => $hodnota) {            if (is_array($hodnota)) {                $vystup .= $klic . "=>**" . $hodnota . "<br>";            } else {                $vystup .= $klic . "=>" . $hodnota . "<br>";            }        }        return $vystup;    }    public function vypisPole2($pole) {        $xx = "";        foreach ($pole as $klic => $hodnota) {            $xx .= $klic . "=>" . $hodnota . "<br>";        }        return "kkk";    }    public function strNaCislo($cis) {        $cislo = str_replace(',', '.', $cis);        $cislo = str_replace(' ', '', $cislo);        return $cislo;    }        public static function amail($data) {        //attachment file path        $file = $data["soubor"];        //header for sender info        $headers = "From:" . $data["odesilatelJmeno"] . " <" . $data["odesilatel"] . ">";        //boundary         $semi_rand = md5(time());        $mime_boundary = "==Multipart_Boundary_x{$semi_rand}x";        //headers for attachment         $headers .= "\nMIME-Version: 1.0\n" . "Content-Type: multipart/mixed;\n" . " boundary=\"{$mime_boundary}\"";        //multipart boundary         $message = "--{$mime_boundary}\n" . "Content-Type: text/html; charset=\"UTF-8\"\n" .                "Content-Transfer-Encoding: 7bit\n\n" . $data["obsah"] . "\n\n";        //preparing attachment        if (!empty($file) > 0) {            if (is_file($file)) {                $message .= "--{$mime_boundary}\n";                $fp = @fopen($file, "rb");                $dataSoubor = @fread($fp, filesize($file));                @fclose($fp);                $dataSoubor = chunk_split(base64_encode($dataSoubor));                $message .= "Content-Type: application/octet-stream; name=\"" . basename($file) . "\"\n" .                        "Content-Description: " . basename($file) . "\n" .                        "Content-Disposition: attachment;\n" . " filename=\"" . basename($file) . "\"; size=" . filesize($file) . ";\n" .                        "Content-Transfer-Encoding: base64\n\n" . $dataSoubor . "\n\n";            }        }        $message .= "--{$mime_boundary}--";//        $returnpath = "-f" . $from;        $returnpath = "-f";        //send email        $mail = @mail($data["prijemce"], $data["predmet"], $message, $headers, $returnpath);        //email sending status        return $mail ? true : false;    }    }