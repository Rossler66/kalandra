<?phpinclude_once( "fce.php" );class template extends fce {    private $vys;    private $preklady;    private $prekladJazyk;    private $prekladObrazovka;    public function __construct() {            }    //Vykreslí nový list    // předpokládá existenci stránky, keterou vytvoří javaskript. Do ní slist vypíše prázdná pole    // - hlava - vždy jenda. Doplní o ID: hlava[listId] a Class: hlava    // - telo - vždy jedno. Doplní o ID: telo[listId] a Class: telo    // - - obsah - vždy jedno. Doplní o ID: obsah[listId] a Class: obsah    // - - - pole - žádné až n podle vstupních parametrů. Doplní o ID list_[listId]_[nazev] a Class: pole    //Struktura    /*     *  $struktura = array(     *      "list" => array("id" => id listu,),      *      "hlava" => array("class" => class hlavy,),     *      "telo" => array("class" => class tela,),     *      "obsah" => array("class" => class obsahu,),     *      "pole"=> array(     *          array(     *              "nazev" => nazev pole pro vytvoření ID,     *              "class" => class pole,     *          ),     *      ),     *  );     */    //Výstup    /*     *  <div class="list" id="list{list,id}">     *      <div clas="hlava {hlava,class}" id="hlava{list,id}">      *      </div>     *      <div class="telo {telo,class}" id="telo{list,id}">     *      </div>     *      <div class="obsah {obsah,class}" id="obsah{list,id}">     *          <div class="pole {pole[],class}" id="list_{list,id}_{pole[],nazev}">     *          </div>     *      </div>     *  </div>     */    public function slist($struktura) {        $this->vys = "";        $this->vys .= "<div class = 'hlava " . $struktura["hlava"]["class"] . "' id = 'hlava" . $struktura["list"]["id"] . "' ></div>";        $this->vys .= "<div class = 'telo " . $struktura["telo"]["class"] . "' id = 'telo" . $struktura["list"]["id"] . "'>";        $this->vys .= "<div class = 'obsah " . $struktura["obsah"]["class"] . "' id = 'obsah" . $struktura["list"]["id"] . "'>";        if (is_array($struktura["pole"])) {            foreach ($struktura["pole"] as $pole) {                $this->vys .= "<div id='list_" . $struktura["list"]["id"] . "_" . $pole["nazev"] . "' class='pole " . $pole["class"] . "' ></div>";            }        }        $this->vys .= "</div>";        $this->vys .= "</div>";        vystup::setList($struktura["list"]["id"], $this->vys);    }    //Vystvoří a vypíše záhlaví listu    //Parametry    /*     *   $struktura = array(     *       "list" => array(     *           "id" => id listu ve kterém se má zobrazit hlavička     *       ),     *       "volby" => array(),     *       "oblast" => array(     *           "nazev" => název oblasti,     *           "class" => třída oblasti,     *       ),     *       "nazev" => array(     *           "nazev" => název listu,     *           "class" => třída pro název     *       ),     *   );     */    public function hlavicka($struktura) {        $this->vys = "";        $this->vys .= "<div class='w2 h2 fr'></div>";        $this->vys .= $this->volby($struktura["volby"], null);        $this->vys .= "<div class='w2 h2 fr'></div>";        $this->vys .= "<div class='oblast " . $struktura["oblst"]["class"] . "'>" . $struktura["oblast"]["nazev"] . "</div>";        $this->vys .= "<div class='nazev " . $struktura["nazev"]["class"] . "'>" . $struktura["nazev"]["nazev"] . "</div>";        vystup::vypis('hlava' . $struktura["list"]["id"], $this->vys);    }    //Vypíše parametry - podpůrná pro pole, formuláře i seznamy    //parametry    /* Struktura - struktura pro výpis     * Data - entita s daty, která jsou dosazována do parametrů. Nesmí být v poli.     *  $struktura = array(     *      "param" => parametry předané serveru jednotlivě tak jak jsou,     *      "parampro" => array( //parametry předávané serveru jednotlivě načtené z entity     *          array(     *              "nazev" => oblast.název //definuje proměnnou, kerá se dosadí do parametru oblast je alias tabulky v elementu a název je název položky v entitě     *              "text" => název parametru     *          ),     *      ),     *      "paramkon" => parametry předávané v parametru par tak jak jsou     *      "paramvar" => array( //parametry předávané v parametru par načtené z entity     *          array(     *              "nazev" => oblast.název //definuje proměnnou, kerá se dosadí do parametru oblast je alias tabulky v elementu a název je název položky v entitě     *              "text" => název parametru     *          ),     *      ),     *  );     */    public function parametry($struktura, $data) {        $param = $struktura["param"];        if (is_array($struktura["parampro"])) {            foreach ($struktura["parampro"] as $parpro) {                list( $obl, $pol ) = explode(".", $parpro["nazev"]);                $param .= " " . $parpro["text"] . "=" . $data[$obl]->$pol;            }        }        if ($struktura["paramkon"] || $struktura["paramvar"]) {            $param .= " prm='" . $struktura["paramkon"];            if (is_array($struktura["paramvar"])) {                foreach ($struktura["paramvar"] as $parvar) {                    list( $obl, $pol ) = explode(".", $parvar["nazev"]);                    $param .= "," . $parvar["text"] . "=" . $data[$obl]->$pol;                }            }            $param .= "'";        }        return $param;    }    //Vytvoří a vypíše seznam    //Parametry    //Struktura - definuje seznam    //Data - pole entit, které tvoří data seznamu a parametrů    //   /*     *  $struktura = array(     *      "list" => array(     *          "id" => id listu, do kterého se vypisuje seznam vytváří se z něj i ID seznamu,     *      ),     *      "misto" => název pole, do kterého se seznam vypisuje. Vytváří se z něj i ID seznamu,     *      "nazev" => název seznamu vytváří se z něj ID seznamu,     *      "nadpis" => array(     *          "text" => text nadpisu seznamu     *      ),     *      "volbyhorni" => volby vypisované vpravo do nadpisu viz volby,     *      "skupina" => array( //definuje skupinu pro výpis, jen když je třeba výpis členit na skupiny     *          "ridicka" => oblast.název //definuje proměnnou z entity dat, při jejíž změně se vypisuje nová skupina oblast je alias tabulky v elementu a název je název položky v entitě     *          "pole" => definice pole vypsané při nové skupině viz pole     *      ),     *      "radek" => viz pis radek,     *      "polozka => viz pis radek,     *      "sumar" => array(     *          array(  // jednotlivé řádky sumáře sumář může mít více řádků     *              "class" => třída sumáře,     *              "polozky" => array(  // položky, které se vypíšou v řádku sumáře     *                  array(     *                      "format" => formát vypisované položky,     *                      "hodnota" => vypisovaná hodnota,     *                      "class" => třída vypisované položky,     *                  ),     *              ),     *          ),     *      ),     *      "volbydolni" => volby vypisované vpravo dole za seznamem viz volby,     *  );     */    public function seznam($struktura, $data) {        $this->vys = "";        $this->vys .= "<table class='seznam' id='list_" . $struktura["list"]["id"] . "_" . $struktura["misto"] . "_" . $struktura["nazev"] . "'>";        if ($struktura["nadpis"]) {            $this->vys .= "<caption>" . $struktura["nadpis"]["text"];            $this->vys .= "<div class='volbypas'>";            $this->vys .= $this->volby($struktura["volbyhorni"], null);            $this->vys .= "</div>";            $this->vys .= "</caption>";        }        $this->vys .= "</table>";        if (!$struktura["skupina"]) {            $this->pisSezHlavicka($struktura);        }        $skupinaHod = null;        if (!is_array($data)) {            $data = array();        }        foreach ($data as $radek) {            if ($struktura["skupina"]) {                list( $obl, $pol ) = explode(".", $struktura["skupina"]["ridicka"], 2);                $hod = $radek[$obl]->$pol;                if ($hod != $skupinaHod) {                    $skupinaHod = $hod;                    if ($hod != null) {                        $this->vys .= "</tbody>";                        $this->vys .= "</table>";                    }                    $this->pisPolePolozky($struktura["skupina"]["pole"], $radek);                    $this->pisSezHlavicka($struktura);                    $this->pisRadek($struktura["radek"], $struktura["polozka"], $radek);                } else {                    $this->pisRadek($struktura["radek"], $struktura["polozka"], $radek);                }            } else {                $this->pisRadek($struktura["radek"], $struktura["polozka"], $radek);                if ($struktura["polozka2"]) {                    $this->pisRadek($struktura["radek"], $struktura["polozka2"], $radek);                }            }        }        if (is_array($struktura["sumar"])) {            foreach ($struktura["sumar"] as $radek) {                $this->vys .= "<tr class='" . $radek["class"] . "'>";                if (!is_array($radek["polozky"])) {                    $radek["polozky"] = array();                }                foreach ($radek["polozky"] as $polozka) {                    if ($polozka["format"]) {                        $fce = $polozka["format"];                        $polozka["hodnota"] = $this->$fce($polozka["hodnota"]);                    }                    $this->vys .= "<td class='" . $polozka["class"] . "'>" . $polozka["hodnota"] . "</td>";                }                //        }                $this->vys .= "</tr>";            }        }        $this->vys .= "</tbody>";        $this->vys .= "<tfoot><tr><td colspan='999'>";        $this->vys .= "<div class='volbypas'>";        $this->vys .= $this->volby($struktura["volbydolni"], null);        $this->vyb .= "</div>";        $this->vys .= "</td></tr></tfoot>";        $this->vys .= "</table>";        vystup::vypis("list_" . $struktura["list"]["id"] . "_" . $struktura["misto"], $this->vys);    }    //Vypíše hlavičku seznamu - názevy sloupců    //Parametry    // - struktura - struktura definující sloupce seznamu    /*     *  $struktura = array(     *      "list" => array(     *          "id" => id listu, do kterého se vypisuje seznam vytváří se z něj i ID seznamu,     *      ),     *      "misto" => název pole, do kterého se seznam vypisuje. Vytváří se z něj i ID seznamu,     *      "nazev" => název seznamu vytváří se z něj ID seznamu,     *      "hlavicka" => array( //sloupce halvičky     *          array(     *              "class" => třída nadpisu sloupce,     *              "param" => paramety ve sloupci, vzpsané tak jak jsou předané,     *              "text" => tex nadpisu sloupce,     *          ),     *      ),     *  );     */    private function pisSezHlavicka($struktura) {        $this->vys .= "<table class='seznam' id='list_" . $struktura["list"]["id"] . "_" . $struktura["misto"] . "_" . $struktura["nazev"] . "'>";        if (is_array($struktura["hlavicka"])) {            $this->vys .= "<thead><tr><th></th>";            foreach ($struktura["hlavicka"] as $polozka) {                $this->vys .= "<th class='" . $polozka["class"] . "' " . $polozka["param"] . " >" . $polozka["text"] . "</th>";            }            $this->vys .= "</tr></thead>";        }        $this->vys .= "<tbody>";    }    //Vypíše řádek v seznamu    //Parametry    // - strRad - formátování řádku    // - strPol - definice položek    // - radek - entita s daty řádku, nesmí být v poli    /*     *  $strRad => array(     *  "parametry" => viz parametry,     *      "format" => funkce pro vrácení třídy řádku podle dat entity řádku     *  );     *       *  $strPol => array(     *      array(     *          "nazev" => oblast.název //definuje proměnnou, kerá se dosadí do sloupce - oblast je alias tabulky v elementu a název je název položky v entitě     *          "obsah" => konstantní hodnota která se dosadí do slsoupce     *          "format" => funkce formátující odnotu dosaznou do sloupce     *          "hodnota" => název proměnné z entity radek, používá se, když je v entitě přímo pole v němž je hodnota     *          "volby" => viz volby, které se objeví místo položky     *      ),       *  );     */    private function pisRadek($strRad, $strPol, $radek) {        $paramradek = $this->parametry($strRad, $radek);        if ($strRad["format"]) {            $fce = $strRad["format"];            $class = $this->$fce($radek);        }        if ($strRad["pocrad"] > 1) {            $zacrad = "<tr " . $paramradek . "class ='" . $class . " radprv'>";            $rowspan = " rowspan = '" . $strRad["pocrad"] . "'";            $classradstav = "podtrh";        } else {            $zacrad = "<tr " . $paramradek . "class ='" . $class . "'>";            $rowspan = "";            $classradstav = "";        }        $this->vys .= $zacrad;        $this->vys .= "<td class='radstav " . $classradstav . "' " . $rowspan . "><div class='stav' style='background-color:" . $radek["stv"]->barva . ";'></div>" .                "<div class='stavpul' style='background-color:" . $radek["stavpul1"] . "'></div><div class='stavpul' style='background-color:" . $radek["stavpul2"] . "'></div></td>";        if (!is_array($strPol)) {            $strPol = array();        }        $cisrad = 1;        foreach ($strPol as $polozka) {            if ($polozka["nazev"]) {                list( $obl, $pol ) = explode(".", $polozka["nazev"], 2);                $hod = $radek[$obl]->$pol;            } elseif ($polozka["obsah"]) {                $hod = $polozka["obsah"];            } elseif ($polozka["hodnota"]) {                $hod = $radek[$polozka["hodnota"]];            } elseif ($polozka["volby"]) {                $hod = $this->volby($polozka["volby"], $radek);            } elseif ($polozka["radek"]) {                $cisrad++;                if ($cisrad == $strRad["pocrad"]) {                    $this->vys .= "</tr><tr " . $paramradek . "class ='" . $class . " radpos'>";                } else {                    $this->vys .= "</tr><tr " . $paramradek . "class ='" . $class . " radstr'>";                }                continue;            }            if ($polozka["format"]) {                $fce = $polozka["format"];//                $hod = $this->$fce($radek[$obl]->$pol);                $hod = $this->$fce($hod);            }            if ($polozka["colspan"]) {                $colspan = "colspan = '" . $polozka["colspan"] . "' ";            } else {                $colspan = "";            }            if ($polozka["odkaz"]) {                list( $obl, $pol ) = explode(".", $polozka["odkaz"], 2);                $odkaz = $radek[$obl]->$pol;                $this->vys .= "<td class='" . $polozka["class"] . "' " . $colspan . "><a href='" . $odkaz . "' target='_blank'>" . $hod . "</a></td>";            } else {                $this->vys .= "<td class='" . $polozka["class"] . "' " . $polozka["volba"] . " " . $colspan . ">" . $hod . "</td>";            }        }        $this->vys .= "</tr>";    }    // Vypíše obsah pole do kterého dosadí hodnoty z data.     //Parametry    // - struktura - struktura vypisovaných dat    // - data - entita s daty - nesmí být pole    /*     *  $struktura => array(     *      "list" => array(     *          "id" => id stránky, do které se má obsah pole vypsat     *      ),         *      "misto" => název pole nebo "dialog", kam se má obsah pole vypsat     *      dále viz pisPolePolozky     *  );     */    public function pole($struktura, $data) {        $this->vys = "";        $this->pisPolePolozky($struktura, $data);        vystup::vypis("list_" . $struktura["list"]["id"] . "_" . $struktura["misto"], $this->vys);    }    //Vypíše položky podle struktury obsahující údaje z entity data    //Parametry    // - struktura - definice zobrazení    // - data - entita s daty, nesmí být pole    /*     *  $struktura = array(     *      "pole" => array(     *          "class" => class celého pole     *      ),      *      "param" => parametry pole, viz parametry     *      "list" => array(     *          "id" => id stránky, do které se má obsah pole vypsat     *      ),         *      "misto" => název pole nebo "dialog", kam se má obsah pole vypsat     *      "nazev" => název obsahu pole, který je součástí ID detailu,     *      "nadpis" => array(     *          "text" => text nadpisu pole,     *          "nazev" => oblast.název //definuje proměnnou z entity dat, která se vypíše do nadpisu     *          "data" => hodnota v poli entity (entita[data]), používá se, pokud je mezi entity vloženo pole s hodnotou     *          "format" => funkce formátující údaj získaný z názvu nebo data     *      ),     *      "volbyhorni" => volba vpravo od nadpisu pole viz. volby     *      "polozky" => array(     *          array => (     *              "typ" => určuje vypisovaný typ     *                  - text - default - vypisuje hodnotu danou dalšími parametry     *                  - kategorie - vypíše kategorie k elementu, povinný další parametr je nazev, kde musí být odkaz na ID elementu     *              "parametry" => parametry pro danoupoložku viz parametry     *              "class" => class celé položky     *              "nadpis" => text uvedený nad hodnotu položky     *              "nazev" => oblast.název //definuje proměnnou z entity dat, která se vypíše jako hodnota položky     *              "hodnota" => pevně definovaná hodnota, jako hodnota položky se doplní co je zde zadáno     *              "format" => funkce formátující údaj získaný z názvu nebo data     *              "volby" =>  volby pro danou položku, viz volby         *          ),     *      ),     *  );     */    private function pisPolePolozky($struktura, $data) {        $hod = "";        $parampole = $this->parametry($struktura["pole"], $data);        $this->vys .= "<div class='detail " . $struktura["pole"]["class"] . "' " . $parampole . " id='list_" .                $struktura["list"]["id"] . "_" . $struktura["misto"] . "_" . $struktura["nazev"] . "'>";        if ($struktura["nadpis"]) {            $this->vys .= "<h2>" . $struktura["nadpis"]["text"];            if ($struktura["nadpis"]["nazev"]) {                list( $obl, $pol ) = explode(".", $struktura["nadpis"]["nazev"]);                $hod .= $data[$obl]->$pol;            }            if ($struktura["nadpis"]["hodnota"]) {                $hod .= $data["hodnota"];            }            if ($struktura["nadpis"]["format"]) {                $fce = $struktura["nadpis"]["format"];                $hod = $$this->$fce($hod);            }            $this->vys .= $hod;            $this->vys .= "<div class='volbypas'>";            $this->vys .= $this->volby($struktura["volbyhorni"], null);            $this->vys .= "</div>";            $this->vys .= "</h2>";        }        if (!is_array($struktura["polozky"])) {            $struktura["polozky"] = array();        }        foreach ($struktura["polozky"] as $polozka) {            $hod = "";            $param = $this->parametry($polozka, $data);            $this->vys .= "<div class='polozka " . $polozka["class"] . "' " . $param . ">";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            if ($polozka["nazev"]) {                list( $obl, $pol ) = explode(".", $polozka["nazev"]);                $hod .= $data[$obl]->$pol;            }            if ($polozka["hodnota"]) {                $hod .= $polozka["hodnota"];            }            if ($polozka["format"]) {                $fce = $polozka["format"];                $hod = $this->$fce($hod);            }            if ($polozka["typ"] == "kategorie") {                $kategorieRep = $this->vratObjekt("element", "kategorie_pre", "kategorie_pre");                $paramKat["elementId"] = $hod;                $paramKat["vlastnikId"] = $_SESSION["uzivId"];                $paramKat["list"] = $struktura["list"]["id"];                $paramKat["jmp"] = $polozka["jmp"];                $paramKat["pre"] = $polozka["pre"];                $this->vys .= $kategorieRep->vratKategorieEle($paramKat);            } elseif($polozka["typ"] == "img"){                $this->vys .= "<div class=' hod'><img src='." . $hod . "'></div>";                $this->vys .= "</div>";                if ($polozka["volby"]) {                    $this->vys .= $this->volby($polozka["volby"], null);                }                            } else {                $this->vys .= "<div class=' hod'>" . $hod . "</div>";                $this->vys .= "</div>";                if ($polozka["volby"]) {                    $this->vys .= $this->volby($polozka["volby"], null);                }            }        }        $this->vys .= "<div class='fc'></div>";        $this->vys .= "</div>";    }    //Vytvoří formulář pro zadání dat    //Parametry    // - struktura - struktura pro vypsání    // - data - data vypsaná do formuláře    /*     *  $struktura = array(     *      "list" => array(     *          "id" => id stránky, do které se má obsah pole vypsat     *      ),         *      "formular" => array(     *          "class" => třída formuláře,     *          "parametry" => vloží parametry viz parametry     *          "nazev" => název formuláře a současně tvoří ID formuláře     *          "nadpis" => text nadpisu formuláře     *      ),     *      "misto" => název pole, do kterého se má vložit a současně tvoří ID formuláře     *      "polozky" => položky, které se vloží do formuláře viz input     *      "volby" => volby, které se vypíší pod formulářem viz volby     *      "klavesnice" => klávesnice, která se má zobrzit (numer, alfa)     *  );     */    public function formular($struktura, $data) {        $this->vys = "";        $this->vys .= "<div class='formular " . $struktura["formular"]["class"] . "' >";        $param = $this->parametry($struktura["formular"], $data);        $this->vys .= "<form onkeydown='formPress(event)' name='" . $struktura["formular"]["nazev"] . "' id='list_" . $struktura["list"]["id"] . "_" . $struktura["misto"] . "_" . $struktura["formular"]["nazev"] . "' " . $param . " >";        if ($struktura["formular"]["nadpis"]) {            $this->vys .= "<h2>" . $struktura["formular"]["nadpis"] . "</h2>";        }        if (!is_array($struktura["polozky"])) {            $struktura["polozky"] = array();        }        foreach ($struktura["polozky"] as $polozka) {            $this->input($polozka, $data);        }        $this->vys .= "</form>";        if ($struktura["volby"]) {            $this->vys .= "<div class='tlacpas'>";            $this->vys .= $this->volby($struktura["volby"], null);            $this->vys .= "</div>";        }        if ($struktura["klavesnice"] == "numer") {            $this->vys .= $this->numer();        }        if ($struktura["klavesnice"] == "alfa") {            $this->vys .= $this->alfa();        }        $this->vys .= "</div>";        if ($struktura["misto"] == "dialog") {            vystup::dialog($this->vys, "formular");        } else {            vystup::vypis("list_" . $struktura["list"]["id"] . "_" . $struktura["misto"], $this->vys);        }    }    //Vypíše formulář našeptávače    //parametry    // - struktura - struktura výpisu    /*     *  $struktura = array(     *      "list" => array(     *          "id" => id stránky, do které se má obsah pole vypsat     *      ),         *      "formular" => array(     *          "class" => třída celého našeptávače     *          "nazev" => název našeptávače atvoří část ID     *          "nadpis" => nadpis našeptávače     *      ),     *      "misto" => název pole nebo "dialog" kam se má našeptávač vypsat     *  );     */    public function naseptavac($struktura) {        $this->vys = "";        $this->vys .= "<div class='formular " . $struktura["formular"]["class"] . "' >";        $this->vys .= "<form  name='" . $struktura["formular"]["nazev"] . "' id='list_" . $struktura["list"]["id"] . "_" . $struktura["misto"] . "_" . $struktura["formular"]["nazev"] . "' " . $param . ">";        $volby = array(            array("ikona" => "zavrit", "funkce" => "onclick='zavriDialog(event);'",),        );        //		if ( $struktura[ "formular" ][ "nadpis" ] ) {        $this->vys .= "<h2>" . $struktura["formular"]["nadpis"] . "<div class='fr'>";        $this->vys .= $this->volby($volby, null);        $this->vys .= "</div></h2>";        //		}        $polozka = array("nadpis" => "Vyhledání [PgDn - další stránka, PdUp - předchozí stránka]", "typ" => "naseptavac", "nazev" => "fil.vyhledani", "param" => "onkeyup='naseptavac(event); '" . $struktura["param"] . " prm='" . $struktura["paramkon"] . "'", "class" => "focus");        $this->input($polozka, null);        $this->vys .= "</form>";        $this->vys .= "<div class='nas-nabidka' id='list_" . $struktura["list"]["id"] . "_" . $struktura["misto"] . "_" . $struktura["formular"]["nazev"] . "_vypis'></div>";        $this->vys .= "</div>";        vystup::dialog($this->vys, "formular");    }    //vytvoří seznam pro nabídku    //Parametry    // - struktura - struktura    /*     *  $struktura = array(     *      "list" => array(     *          "id" => id stránky, do které se má obsah pole vypsat     *      ),         *      "formular" => array(     *          "class" => třída celého našeptávače     *          "nazev" => název našeptávače atvoří část ID     *          "nadpis" => nadpis našeptávače     *      ),     *      "misto" => název pole nebo "dialog" kam se má našeptávač vypsat     *  );     */    function nabseznam($struktura) {        $this->vys = "";        $this->vys .= "<div class='formular " . $struktura["formular"]["class"] . "' >";        $this->vys .= "<form  name='" . $struktura["formular"]["nazev"] . "' id='list_" . $struktura["list"]["id"] . "_" . $struktura["misto"] . "_" . $struktura["formular"]["nazev"] . "' " . $param . ">";        $volby = array(            array("ikona" => "zavrit", "funkce" => "onclick='zavriDialog(event);'",),        );        $this->vys .= "<h2>" . $struktura["formular"]["nadpis"] . "<div class='fr'>";        $this->vys .= $this->volby($volby, null);        $this->vys .= "</div></h2>";        $this->vys .= "</form>";        $this->vys .= "<div class='nas-nabidka' id='list_" . $struktura["list"]["id"] . "_" . $struktura["misto"] . "_" . $struktura["formular"]["nazev"] . "_vypis'></div>";        $this->vys .= "</div>";        vystup::dialog($this->vys, "formular");    }    //vypíše elementy navázeané na halvní elementy    //Parametry    // - struktura    // - data    /*     *  $struktura = array(     *      "vazba" => array(     *          "parametry" => vparametry celé vazby, připisují se každému parametru, viz. parametry     *      ),     *  );     */    public function vazba($struktura, $data) {        $this->vys = "";        $this->vys .= "<div class='detail'>";        $aktNadpis = "";        if (!is_array($data)) {            $data = array();        }        foreach ($data as $vazba) {            if ($aktNadpis != $vazba["vvk"]->popis) {                $aktNadpis = $vazba["vvk"]->popis;                $this->vys .= "<h2>" . $aktNadpis . "</h2>";            }            $param = $this->parametry($struktura["vazba"], $vazba);            $this->vys .= "<div " . $param . ">";            $this->vys .= "<div class='hod w100po'>" . $vazba["ele"]->oznaceni . " - " . $vazba["ele"]->nazev . "</div>";            if ($vazba["vuz"]->popis) {                $this->vys .= "<div class='upresneni'>" . $vazba["vuz"]->popis . "</div>";            }            if (!is_array($vazba["doplnek"])) {                $vazba["doplnek"] = array();            }            foreach ($vazba["doplnek"] as $doplnek) {                $this->vys .= "<div class='doplnek fc'>";                $this->vys .= "<div class='w20po fl nav'>" . $doplnek["vvd"]->popis . "</div><div class='w80p fl hod'>" . $doplnek["text"] . "</div>";                $this->vys .= "</div>";            }            $this->vys .= "</div>";        }        $this->vys .= "<div class='fc'></div>";        $this->vys .= "</div>";        vystup::vypis("list_" . $struktura["list"]["id"] . "_" . $struktura["misto"], $this->vys);    }    //Položky formuláře    //Parametry    // - položka - struktura jené položky    // - data - entita položky, ne v poli    /*     *  $polozka = array(     *      "typ" => typ položky     *          - hidden - skrytá položka [typ, nazev, hodnotakon]     *          - select - combo nabídka [typ, nazev, class, nadpis, option]     *          - radio - radiobutton [typ, nazev, class, hodnotakon, volby]     *          - vazba - předdefinované volby, které je možné navolit žádnou až všechny [typ, nazev, class, nadpis, option, doplnek]     *          - textarea - textové pole [typ, nazev, hodnotakon, class, nadpis]     *          - naseptavac - pole našeptávače [typ, nazev, hodnotakon, class, param, doplnek]     *          - nadpis - vytvoří nadpis ve formuláři [typ, class, nadpis]     *          - hodnota - vypíše položku jako text bez možnosti editace [typ, nazev, class, hodnotakon]     *          - checkbox - zobrazí checkbox [typ, nazev, class, nadpis, hodnotakon, doplnek, text]     *          - dcislo - vkládání desetinného čísla [typ, nazev, hodnotakon, class, doplnek]     *          - icislo - vkládání celého čísla [typ, nazev, hodnotakon, class, doplnek]     *          - soubor - vložení souboru přetažením [typ, nazev, class, nadpis, src, id, jmp, pre, fce, prm]     *          - jiné - do input kde do typu vloží typ [typ, nazev, hodnotakon, class, doplnek]     *          - text - vypíše text bez inputu      *      "nazev" => vždy název proměnné a také oblast.název //definuje proměnnou z entity dat, která se vypíše jako hodnota položky     *      "hodnotakon" => pokud je definovaná, vloží se její hodnota jako proměnná     *          - u checkboxu obsahuje povinně hodnotu     *      "class" => class pro cleou proměnnou i s nadpisem     *      "nadpis" => text nadpisu (názvu) proměnné     *      "option" => array( - jen pro select     *          array(     *              "hodnota" => hodnota položky comba     *              "text" => text položky comba     *          ),     *      );     *      "volby" => array(     *          "hodnota" => hodnota položky     *          "text" => text položky     *      ),     *      "option" => ( - jen pro vazba     *          array(     *              "id" => skutečné id vazby, pokud existuje     *              "text" => text položky     *              "hodnota" => hodnota proměnné     *          ),     *      ),     *      "doplnek" =>      *          - u našeptávače a checkboxu je vložen do inputu     *      "param" =>      *          - u vazby rozšiřuje každou hodnotu     *          - u našeptávače parametry v inputu pro vyvolání nabídky     *      "nadpis" => text nadpisu     *      "text" =>     *          - u checkboxu se objeví jako text u zatrhávátka     *      "src" => source zobrazeného obrázku     *      "jmp, pre, fce" => voladná funkce při vložení obrázku     *      "prm" => parametry předávané funkci při vložení obrázku     *  );     */    private function input($polozka, $data) {        list( $obl, $pol ) = explode(".", $polozka["nazev"]);        if (!is_null($polozka["hodnotakon"])) {            $hod = $polozka["hodnotakon"];        } elseif ($polozka["nazev"]) {            $hod = $data[$obl]->$pol;        }        if ($polozka["typ"] == "hidden") {            $this->vys .= "<input type='" . $polozka["typ"] . "' name='" . $obl . "_" . $pol . "' value='" . $hod . "' " . $polozka["doplnek"] . ">";            return;        }        if ($polozka["typ"] == "select") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            $this->vys .= "<select name='" . $obl . "_" . $pol . "'>";            if (!is_array($polozka["option"])) {                $polozka["option"] = array();            }            foreach ($polozka["option"] as $option) {                if ($data[$obl]->$pol == $option["hodnota"]) {                    $this->vys .= "<option value='" . $option["hodnota"] . "' selected>" . $option["text"] . "</option>";                } else {                    $this->vys .= "<option value='" . $option["hodnota"] . "'>" . $option["text"] . "</option>";                }            }            $this->vys .= "</select>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "radio") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            if (!is_array($polozka["volby"])) {                $polozka["volby"] = array();            }            foreach ($polozka["volby"] as $volba) {                if ($hod == $volba["hodnota"]) {                    $this->vys .= "<input type='radio' name='" . $obl . "_" . $pol . "' value='" . $volba["hodnota"] . "' class='fl' checked><div class='fl'>" . $volba["text"] . "</div>";                } else {                    $this->vys .= "<input type='radio' name='" . $obl . "_" . $pol . "' value='" . $volba["hodnota"] . "' class='fl'><div class='fl'>" . $volba["text"] . "</div>";                }            }            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "vazba") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnotax'>";            $ii = 0;            if (!is_array($polozka["option"])) {                $polozka["option"] = array();            }            foreach ($polozka["option"] as $option) {                if ($option["id"] > 0) {                    $stav = "checked='checked'";                } else {                    $stav = "";                }                //				$this->vys .= "<li id='".$option["id"]."' stav='".$stav."'  value='" . $option[ "hodnota" ] . "' akc='prepni'>" . $option[ "text" ] . "</li>";                $this->vys .= "<div class='checkpole' akc='prepni'>" . $option["text"];                $this->vys .= "<input type='checkbox' name='" . $obl . "_" . $pol . "' polid='" . $option["id"] . "' value='" . $option["hodnota"] . "' " . $stav .                        "  " . $polozka["doplnek"] . ">";                $ii++;                $this->vys .= "<span class='prepinac'></span>";                $this->vys .= "</div>";            }            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "textarea") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota hau'>";            $this->vys .= "<textarea  name='" . $obl . "_" . $pol . "'>" . $hod . "</textarea>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "textareack") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota hau'>";            $this->vys .= "<textarea ckedit='ano'  name='" . $obl . "_" . $pol . "' id='".$polozka["id"]."'>" . $hod . "</textarea>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }                if ($polozka["typ"] == "naseptavac") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            $this->vys .= "<input class='naseptavac' type='text' name='" . $obl . "_" . $pol . "' " . $polozka["param"] . " value='" . $polozka["hodnotakon"] . "' " . $polozka["doplnek"] . ">";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "nadpis") {            $this->vys .= "<h3 class='" . $polozka["class"] . "'>" . $polozka["nadpis"] . "</h3>";            return;        }        if ($polozka["typ"] == "hodnota") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            $this->vys .= "<div class='hod'>" . $hod . "</div>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "checkbox") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            if ($polozka["hodnotakon"] === $data[$obl]->$pol) {                $checked = "checked";            } else {                $checked = "";            }            $this->vys .= "<input type='" . $polozka["typ"] . "' name='" . $obl . "_" . $pol . "' value='" . $polozka["hodnotakon"] . "' " . $polozka["doplnek"] . " " . $checked . " ><div class='text'>" . $polozka["text"] . "</div>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "dcislo") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            $this->vys .= "<input type='text' name='" . $obl . "_" . $pol . "' value='" . $hod . "' " . $polozka["doplnek"] . " onkeypress='return inputdcislo(event);'>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "icislo") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            $this->vys .= "<input type='text' name='" . $obl . "_" . $pol . "' value='" . $hod . "' " . $polozka["doplnek"] . " onkeypress='return inputicislo(event);'>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "soubor") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            $this->vys .= "<img class='vlozsoubor' src='" . $polozka["src"] . "' id='" . $polozka["id"] . "' ondrop='nahrajSoubor(event,\"" . $polozka["jmp"] . "\",\"" . $polozka["pre"] . "\",\"" . $polozka["fce"] . "\",\"" . $polozka["form"] . "\",\"" . $polozka["prm"] . "\",true);' " .                    "src=''>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "tlacitko") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            $this->vys .= "<div class='tlacitko' " . $polozka["param"] . " jmp='" . $polozka["jmp"] . "' pre='" . $polozka["pre"] . "' fce='" . $polozka["fce"] . "' prm='" . $polozka["prm"] . "'> " .                    $hod . "</div>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "obrazek") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='obrazek'>";            $this->vys .= $this->volby($polozka["volby"], null);            $this->vys .= "<img class='formobr' src='" . $polozka["src"] . "'  >";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        if ($polozka["typ"] == "datetime-local") {            $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";            $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";            $this->vys .= "<div class='hodnota'>";            $datcas = str_replace(" ", "T", $data[$obl]->$pol);            $this->vys .= "<input type='datetime-local' name='" . $obl . "_" . $pol . "' value='" . $datcas . "' " . $polozka["doplnek"] . ">";            $this->vys .= "</div>";            $this->vys .= "</div>";            return;        }        $this->vys .= "<div class='polozka " . $polozka["class"] . "'>";        $this->vys .= "<div class='nav'>" . $polozka["nadpis"] . "</div>";        $this->vys .= "<div class='hodnota'>";        if (!is_null($polozka["hodnotakon"])) {            $this->vys .= "<input type='" . $polozka["typ"] . "' name='" . $obl . "_" . $pol . "' value='" . $polozka["hodnotakon"] . "' " . $polozka["doplnek"] . ">";        } else {            $this->vys .= "<input type='" . $polozka["typ"] . "' name='" . $obl . "_" . $pol . "' value='" . $data[$obl]->$pol . "' " . $polozka["doplnek"] . ">";        }        $this->vys .= "</div>";        $this->vys .= "</div>";    }    /*      [text] - text, který se zobrazí uživateli ve volbě      [ikona] - název ikony, která se zobrazí uživaeli      [param] - samostatné parametry, které se vloží do tagu volby slouží jako řídící parametry a neředávají se serveru      [paramkon] - konstantní parametry předávané serveru, které se vloží do tagu jako parametr prm a předávají se serveru      [paramvar] - variabilní parametry předávané serveru, které se vloží do tagu jako parametr prm a předávají se serveru      [nazev] - název parametru      [hodnota] - hodnota parametru, složená z názvu entity a názvu proměnné oddělené tečkou například ele.id      [funkce] - funkce, která se vloží do tagu      [class] - doplňková třída volby      [volby] - podřízené volby, které se zobrazí při kliknutí na mateřskou volbu      [...] - pole ovleb      [text] - text, který se zobrazí uživateli ve volbě      [ikona] - název ikony, která se zobrazí uživaeli      [param] - samostatné parametry, které se vloží do tagu volby slouží jako řídící parametry a neředávají se serveru      [paramkon] - konstantní parametry předávané serveru, které se vloží do tagu jako parametr prm a předávají se serveru      [paramvar] - variabilní parametry předávané serveru, které se vloží do tabu jako parametr prm a předávají se serveru      [nazev] - název parametru      [hodnota] - hodnota parametru, složená z názvu entity a názvu proměnné oddělené tečkou například ele.id      [funkce] - funkce, která se vloží do tagu      [class] - doplňková třída volby     */    //vypíše volby    // parametry    // - volby - struktura co se má vypsat    // - data - data, která se doplňují do voleb    /*  $volby = array(     *      array => (     *          "ikona" => třída ikony, která se zobrazí u volby, není-li zobrazí se tlačítko     *          "paramvar" => array( - parametry v prm     *              array(     *                  nazev => oblast.název //definuje proměnnou z entity dat, která se vypíše jako parametr volby     *              ),     *           ),        *          "class" => třída pro danou volbu     *          "funkce" => javascript funkce, volaná kliknutím na volbu     *          "param" => přímo vložené parametry     *          "paramkon" => parametry přímo vložené do prm     *          "text" => text uvedený ve volbě     *          "volby" => array(     *              "ikona" => třída ikony, která se zobrazí u volby, není-li zobrazí se tlačítko     *              "paramvar" => array( - parametry v prm     *                  array(     *                      nazev => oblast.název //definuje proměnnou z entity dat, která se vypíše jako parametr volby     *                  ),     *              ),        *              "class" => třída pro danou volbu     *              "funkce" => javascript funkce, volaná kliknutím na volbu     *              "param" => přímo vložené parametry     *              "paramkon" => parametry přímo vložené do prm     *              "text" => text uvedený ve volbě     *          ),     *      ),     *  );     */    private function volby($volby, $data) {        $vystup = "";        if (!is_array($volby)) {            $volby = array();        }        foreach ($volby as $volba) {            if ($volba["ikona"]) {                $class = "iko iko-" . $volba["ikona"];            } else {                $class = "tlacitko";            }            /*              $prm = "";              if (is_array($volba["paramvar"])) {              foreach ($volba["paramvar"] as $parvar)              list( $obl, $pol ) = explode(".", $parvar["nazev"]);              $prm .= "," . $parvar["text"] . "=" . $data[$obl]->$pol . "";              }              $vystup .= "<div class='" . $class . " " . $volba["class"] .              "' " . $volba["funkce"] . " " . $volba["param"] . "  prm='" . $volba["paramkon"] . $prm . "'>" . $volba["text"];             *              */            $param = $this->parametry($volba, $data);            $vystup .= "<div class='" . $class . " " . $volba["class"] . "' " . $volba["funkce"] . " " . $param . ">" . $volba["text"];            if (is_array($volba["volby"])) {                $vystup .= "<div class='menu-roleta'><ul >";                foreach ($volba["volby"] as $vol) {                    if ($vol["ikona"]) {                        $class = "iko iko-" . $vol["ikona"];                    } else {//                        $class = "tlacitko";                        $class = "";                    }                    /*                      $prm = "";                      if (is_array($vol["paramvar"])) {                      foreach ($vol["paramvar"] as $parvar)                      list( $obl, $pol ) = explode(".", $parvar["nazev"]);                      $prm .= "," . $parvar["text"] . "=" . $data[$obl]->$pol . "";                      }                      $vystup .= "<li " . $vol["funkce"] . " " . $vol["param"] . " prm='" . $vol["paramkon"] . $prm . "' ><div class='" . $class . $vol["class"] .                      "'></div> " . $vol["text"] . "</li>";                     *                      */                    $param = $this->parametry($vol, $data);                    $vystup .= "<li " . $vol["funkce"] . " " . $param . ">";                    if ($class) {                        $vystup .= "<div class='" . $class . $vol["class"] . "'></div> ";                    }                    $vystup .= $vol["text"] . "</li>";                }                $vystup .= "</ul></div>";            }            $vystup .= "</div>";        }        return $vystup;    }    public function preklad($obrazovka, $jazyk) {        $this->prekladJazyk = $jazyk;        $this->prekladObrazovka = $obrazovka;        $paramVyb["where"] = "pre.obrazovka ='" . $obrazovka . "'";        $prekladEnt = $this->nactiSeznam("sys", "sys_rep", "sys_preklad_kat_rep", $paramVyb);        $this->preklady = array();        foreach ($prekladEnt as $pol) {            $this->preklady[$obrazovka . "_" . $pol["pre"]->polozka] = array("preklad" => $pol["pre"]->$jazyk, "id" => $pol["pre"]->id);        }    }    public function pre($polozka) {        if ($this->preklady[$this->prekladObrazovka . "_" . $polozka]["id"] > 0) {            if ($this->preklady[$this->prekladObrazovka . "_" . $polozka]["preklad"] > " ") {                return $this->preklady[$this->prekladObrazovka . "_" . $polozka]["preklad"];            } else {                return $polozka;            }        } else {            $this->preklady[$this->prekladObrazovka . "_" . $polozka] = array("preklad" => $polozka, "id" => 0);            $prekladRep = $this->vratObjekt("sys", "sys_rep", "sys_preklad_kat_rep");            $prekladEnt = $prekladRep->vratEntitu(null);            $prekladEnt[0]["pre"]->obrazovka = $this->prekladObrazovka;            $prekladEnt[0]["pre"]->polozka = $polozka;            $prekladRep->uloz($prekladEnt[0]["pre"], "pre");            return $polozka;        }    }    private function numer() {        $vystup = "";        $vystup .= "<div class = 'klavesnice' onclick='klavesnice(event);'>";        $vystup .= "<div class='klavesanum'>7</div>";        $vystup .= "<div class='klavesanum'>8</div>";        $vystup .= "<div class='klavesanum'>9</div>";        $vystup .= "<div class='klavesanum'>4</div>";        $vystup .= "<div class='klavesanum'>5</div>";        $vystup .= "<div class='klavesanum'>6</div>";        $vystup .= "<div class='klavesanum'>1</div>";        $vystup .= "<div class='klavesanum'>2</div>";        $vystup .= "<div class='klavesanum'>3</div>";        $vystup .= "<div class='klavesanum'>«</div>";        $vystup .= "<div class='klavesanum'>0</div>";        $vystup .= "<div class='klavesanum'>.</div>";        $vystup .= "<div class='fc'></div>";        $vystup .= "</div>";        return $vystup;    }    private function alfa() {        $vystup = "";        $vystup .= "<div class = 'klavesnice' onclick='klavesnice(event);'>";        $vystup .= "<div class='klavesaalf'>1</div>";        $vystup .= "<div class='klavesaalf'>2</div>";        $vystup .= "<div class='klavesaalf'>3</div>";        $vystup .= "<div class='klavesaalf'>4</div>";        $vystup .= "<div class='klavesaalf'>5</div>";        $vystup .= "<div class='klavesaalf'>6</div>";        $vystup .= "<div class='klavesaalf'>7</div>";        $vystup .= "<div class='klavesaalf'>8</div>";        $vystup .= "<div class='klavesaalf'>9</div>";        $vystup .= "<div class='klavesaalf'>0</div>";        $vystup .= "<div class='klavesaalf'>Q</div>";        $vystup .= "<div class='klavesaalf'>W</div>";        $vystup .= "<div class='klavesaalf'>E</div>";        $vystup .= "<div class='klavesaalf'>R</div>";        $vystup .= "<div class='klavesaalf'>T</div>";        $vystup .= "<div class='klavesaalf'>Z</div>";        $vystup .= "<div class='klavesaalf'>U</div>";        $vystup .= "<div class='klavesaalf'>I</div>";        $vystup .= "<div class='klavesaalf'>O</div>";        $vystup .= "<div class='klavesaalf'>P</div>";        $vystup .= "<div class='klavesaalfpul'></div>";        $vystup .= "<div class='klavesaalf'>A</div>";        $vystup .= "<div class='klavesaalf'>S</div>";        $vystup .= "<div class='klavesaalf'>D</div>";        $vystup .= "<div class='klavesaalf'>F</div>";        $vystup .= "<div class='klavesaalf'>G</div>";        $vystup .= "<div class='klavesaalf'>H</div>";        $vystup .= "<div class='klavesaalf'>J</div>";        $vystup .= "<div class='klavesaalf'>K</div>";        $vystup .= "<div class='klavesaalf'>L</div>";        $vystup .= "<div class='klavesaalfpul'></div>";        $vystup .= "<div class='klavesaalfpul'></div>";        $vystup .= "<div class='klavesaalf'>-</div>";        $vystup .= "<div class='klavesaalf'>Y</div>";        $vystup .= "<div class='klavesaalf'>X</div>";        $vystup .= "<div class='klavesaalf'>C</div>";        $vystup .= "<div class='klavesaalf'>V</div>";        $vystup .= "<div class='klavesaalf'>B</div>";        $vystup .= "<div class='klavesaalf'>N</div>";        $vystup .= "<div class='klavesaalf'>M</div>";        $vystup .= "<div class='klavesaalf'>«</div>";        $vystup .= "<div class='klavesaalfpul'></div>";        $vystup .= "<div class='klavesaalf'>.</div>";        $vystup .= "<div class='klavesaalf'>+</div>";        $vystup .= "<div class='klavesaalf'>*</div>";        $vystup .= "<div class='klavesaalf klavmezera'>mezera</div>";        $vystup .= "<div class='klavesaalf'>_</div>";        $vystup .= "<div class='klavesaalf'>/</div>";        $vystup .= "<div class='fc'></div>";        $vystup .= "</div>";        return $vystup;    }}